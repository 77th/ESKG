source udp-nginx-acessfull {
udp(port(25230)
log_iw_size(1000)
log_fetch_limit(1000000)) ;
};
#source tcp_remote_log_host_nginx_main   {tcp(port(25230) so_rcvbuf(67108864) log_iw_size(100000)   log_fetch_limit(1000000) max-connections(100)) ;};

parser p-nginx-acessfull-mapped {
    csv-parser(columns("nginx.time", "nginx.http_host", "nginx.remote_addr", "nginx.http_x_forwarded_for", "nginx.request", "nginx.request_method","nginx.status", "nginx.body_bytes_sent", "nginx.http_referer", "nginx.request_time", "nginx.upstream_http_x_cache", "nginx.uri", "nginx.upstream_addr", "nginx.host", "nginx.upstream_response_length", "nginx.upstream_status", "nginx.server_name", "nginx.newurl", "nginx.upstream_response_time", "nginx.upstream_cache_status", "nginx.user_agent","nginx.request_uri","nginx.http_cookie" )
         flags(escape-double-char,strip-whitespace)
         delimiters("|")
         quote-pairs('""[]')
         );
};


parser p_geoip2 { geoip2( "${nginx.remote_addr}", prefix( "geoip2." ) database( "/usr/local/etc/GeoLite2-City.mmdb" ) ); };

rewrite r_geoip2 {
    set(
        "${geoip2.location.latitude},${geoip2.location.longitude}",
        value( "geoip2.location2" ),
        condition(not "${geoip2.location.latitude}" == "")
    );
};



###Направляем nginx_acess в elasticsearch
destination d_elastic-nginx-acessfull {
  elasticsearch2(
    #client-lib-dir("/usr/share/elasticsearch/lib/")
    index("nginx-access-geo-${YEAR}.${MONTH}")
    type("test")
    time-zone("UTC")
    client_mode("http")
    flush-limit("10")
    cluster_url("http://elasticsearch.local:9200")
    custom_id("${UNIQID}")
    template("$(format_json --scope nv_pairs --key ISODATE @timestamp=${ISODATE})")
    type("netdata")
    persist-name(elasticsearch-netdata)
  );
};






destination file_elastic-nginx-acessfull {
        file("/var/log/nginx.log"
             template("${MESSAGE}\n")
             template-escape(no));
};





log {source (udp-nginx-acessfull);
parser(p-nginx-acessfull-mapped);
rewrite(r_geoip2);
parser(p_geoip2);
destination(d_elastic-nginx-acessfull);};

######################################


source udp-nginx-error {
udp(port(25231)
log_iw_size(1000)
log_fetch_limit(1000000));
};

destination d_elastic-nginxerror {
  elasticsearch2(
    #client-lib-dir("/usr/share/elasticsearch/lib/")
    index("nginxerror-${YEAR}.${MONTH}.${DAY}")
    type("test")
    time-zone("UTC")
    client_mode("http")
    flush-limit("10000")
    cluster_url("http://elasticsearch.local:9200")
    custom_id("${UNIQID}")
    template("$(format_json --scope nv_pairs --key ISODATE @timestamp=${ISODATE})")
  );
};

###########фильтры
#исключи unlink
filter f_tail_nginx_error_unlink {not match ("unlink") ;};

#####Логи nginx error
log {source(udp-nginx-error); filter(f_tail_nginx_error_unlink); destination(d_elastic-nginxerror); };









##Прием логов nodejs  с удаленных машин  на порт 
source remote_log_host_nodejs {
 udp(port(25216) log_iw_size(1000) log_fetch_limit(1000000) flags(no-parse));
};

#parser p_json { json-parser (prefix(".json."));};

#parser p_json { json-parser(); };

###Направляем nodejs логи  в elasticsearch
destination d_elastic_nodejs {
  elasticsearch2(
    #client-lib-dir("/usr/share/elasticsearch/lib/")
    index("nodejs")
    type("test")
    time-zone("UTC")
    client_mode("http")
    flush-limit("10000")
    cluster_url("http://elasticsearch.local:9200")
    custom_id("${UNIQID}")
    template("$(format_json --scope nv_pairs --key ISODATE @timestamp=${ISODATE})")
    #template("${ISODATE} ${TZ} ${HOST} ${MESSAGE}\n")
    #template("$(format_json --scope dot-nv-pairs --key ISODATE @timestamp=${ISODATE})")

  );
};

destination file_elastic-node {
        file("/var/log/node.log"
             template("${MESSAGE}\n")
             template-escape(no));
};

log {
    source(remote_log_host_nodejs);
    #parser(p_json);
    destination(d_elastic_nodejs);
};

#log {
    #source(remote_log_host_nodejs);
    ##parser(p_json);
    #destination(file_elastic-node);
#};